/**
 * \file vm_types.ht
 * Description: STANDARD TYPES DEFINITIONS,
 * contains the types definitions
*/
/****************************************************************************/
#ifndef __VM_TYPES_HT__
#define __VM_TYPES_HT__

#include "stdbool.h"

/**
 * \brief =========================================================================
 * Portable types
 * =========================================================================
*/
#if defined(__cplusplus) && defined(__GNUC__) && (__GNUC__>=4) && (__GNUC_MINOR__>=6)
#define opaque_enum(e) enum e : int
#else
#define opaque_enum(e) enum e
#endif

#define typedef_opaque_enum(e1, e2) \
    opaque_enum(e1); \
    typedef enum e1 e2

#if defined(__arm) || defined(__GNUC__)
typedef unsigned int        Primitive;

typedef unsigned char       u8;
typedef unsigned char       U8;
typedef signed   char       s8;
typedef signed   char       S8;
typedef          char       ascii;
typedef unsigned short      u16;
typedef unsigned short      U16;
typedef          short      s16;
typedef          short      S16;
typedef unsigned int        u32;
typedef unsigned int        U32;
typedef          int        s32;
typedef          int        S32;
typedef          int        I32;
typedef unsigned long long  u64;
typedef unsigned long long  U64;
typedef          long long  s64;
typedef          long long  S64;

typedef long long           *PS64;
typedef int                 *PS32;
typedef short               *PS16;
typedef char                *PS8;
typedef unsigned long long  *PU64;
typedef unsigned int        *PU32;
typedef unsigned short      *PU16;
typedef unsigned char       *PU8;

typedef u16                 u16Char;
typedef u8                  u8Char;

/**
 * \brief Jlo & Fch : Is defined below
 * #define far
 * #define near
 */
#define huge

#endif

/**
 * \brief =========================================================================
 * Memory alignment tools
 * =========================================================================
*/

typedef struct __alg { char c; void * p; } __alg_t;
#define ALIGNMENT               (offsetof(__alg_t, p) - 1)
#define ALIGN(P)                ( (u32) ((char *)((long)(P)) + ALIGNMENT) & ~ALIGNMENT)

/**
 * \brief =========================================================================
 * Basic goodies
 * =========================================================================
*/

#ifndef TRUE
#define TRUE    (1)
#endif

#ifndef FALSE
#define FALSE   (0)
#endif

#define OK      0

#define ERROR   -1

/**
 * \brief =========================================================================
 * ANSI / NON ANSI compatibility
 * =========================================================================
*/

#ifdef __arm
#if defined (__STDC__)
#define CAT(X,Y)                X##Y
#else
#define CAT(X,Y)                X/**/Y
#endif
#else
#define CAT(X,Y)                X##Y
#endif

#if defined(__STDC__) || defined(__arm)

#ifndef __cplusplus
#ifndef offsetof
#define offsetof(S,F)           (u32) (((u8*)&(((S *) 0)->F))-((u8*)0))
#endif
#ifndef NULL
#define NULL                    0 // yfa should be ((void *) 0) !!!
#endif  // NULL
#define VOLATILE                volatile
#define CONST                   const
#define VOID                    void
#endif  // __cplusplus

#define USE_PROTOTYPES
#define _PROTO(X)               X
#define TOKEN                   CAT(CAT(y,f),__LINE__)

#ifdef INLINING
#define MEMCPY(Dst,Src,Len)     ( *((struct TOKEN {char xx[Len];} *) Dst) =\
				  *((struct TOKEN *) Src), Dst )
#endif  // INLINING

#else /* not ANSI */

#ifndef NULL
#define NULL                     0
#endif  // NULL
#define signed
#define VOLATILE
#define volatile
#define CONST
#define const
#define VOID
#define _PROTO(X)               ( )
#define offsetof(S,F)           (u32) (((u8*)&(((S *) 0)->F))-((u8*)0))

#endif  // __STDC__ || __arm

/**
 * \brief =========================================================================
 * IBM-PC extended keywords (with Microsoft C compiler V4.0 or above)
 * =========================================================================
*/

#define FAR
#define far
#define NEAR
#define near
#if defined(LINUX) || defined(__linux__)
#ifdef  HUGE
#undef  HUGE
#endif
#endif
#define HUGE

/**
 * \brief =========================================================================
 * Various defines
 * =========================================================================
*/

#define PNUL     ((void *)0)            /* NULL pointer                     */
#define PFNUL    ((void far *)0)        /* NULL far pointer                 */
#define PNIL     ((void *)-1)           /* Negative pointer                 */
#define PFNIL    ((void far *)-1)       /* Negative far pointer             */
#define PFCNUL   ((void (*)())0)        /* NULL function pointer            */
#define PFCNIL   ((void (*)())-1)       /* Negative function pointer        */
#define PFCFNUL  ((void (far *)())0)    /* NULL far function pointer        */
#define PFCFNIL  ((void (far *)())-1)   /* Negative far function pointer    */

/**
 * \brief =========================================================================
 * RTK unix only
 * =========================================================================
*/

#define __GO
#define __END

/**
 * \brief =========================================================================
 * compiler variance
 * =========================================================================
*/

/*
  * packed structure
  */
#if defined (__GNUC__) && !defined(__packed)
#define __packed __attribute__((packed))
#endif

/*
  * alignment
  */
#if defined(__GNUC__)
    #define __align(_n_)                __attribute__ ((aligned (_n_)))
#elif defined(__ARMCC_VERSION)
    /* __align(_n_) is already supported in RVCT */
#else
    #define __align(_n_)
#endif

/*
  * return address
  */
#if defined(__GNUC__)                 /* GCC */
#define __return_address()              __builtin_return_address(0)
#endif

/* section */
#if defined(__GNUC__)
    #define __section__(section_name) __attribute__((section (#section_name)))
#else
    #define __section__(section_name)
#endif

#define likely(x)	__builtin_expect(!!(x), 1)
#define unlikely(x)	__builtin_expect(!!(x), 0)

/**
 * \brief =========================================================================
 * Bitmap
 * =========================================================================
*/

#ifndef BIT0
#define BIT0    0b00000000000000000000000000000001
#endif
#ifndef BIT1
#define BIT1    0b00000000000000000000000000000010
#endif
#ifndef BIT2
#define BIT2    0b00000000000000000000000000000100
#endif
#ifndef BIT3
#define BIT3    0b00000000000000000000000000001000
#endif
#ifndef BIT4
#define BIT4    0b00000000000000000000000000010000
#endif
#ifndef BIT5
#define BIT5    0b00000000000000000000000000100000
#endif
#ifndef BIT6
#define BIT6    0b00000000000000000000000001000000
#endif
#ifndef BIT7
#define BIT7    0b00000000000000000000000010000000
#endif
#ifndef BIT8
#define BIT8    0b00000000000000000000000100000000
#endif
#ifndef BIT9
#define BIT9    0b00000000000000000000001000000000
#endif
#ifndef BIT10
#define BIT10   0b00000000000000000000010000000000
#endif
#ifndef BIT11
#define BIT11   0b00000000000000000000100000000000
#endif
#ifndef BIT12
#define BIT12   0b00000000000000000001000000000000
#endif
#ifndef BIT13
#define BIT13   0b00000000000000000010000000000000
#endif
#ifndef BIT14
#define BIT14   0b00000000000000000100000000000000
#endif
#ifndef BIT15
#define BIT15   0b00000000000000001000000000000000
#endif
#ifndef BIT16
#define BIT16   0b00000000000000010000000000000000
#endif
#ifndef BIT17
#define BIT17   0b00000000000000100000000000000000
#endif
#ifndef BIT18
#define BIT18   0b00000000000001000000000000000000
#endif
#ifndef BIT19
#define BIT19   0b00000000000010000000000000000000
#endif
#ifndef BIT20
#define BIT20   0b00000000000100000000000000000000
#endif
#ifndef BIT21
#define BIT21   0b00000000001000000000000000000000
#endif
#ifndef BIT22
#define BIT22   0b00000000010000000000000000000000
#endif
#ifndef BIT23
#define BIT23   0b00000000100000000000000000000000
#endif
#ifndef BIT24
#define BIT24   0b00000001000000000000000000000000
#endif
#ifndef BIT25
#define BIT25   0b00000010000000000000000000000000
#endif
#ifndef BIT26
#define BIT26   0b00000100000000000000000000000000
#endif
#ifndef BIT27
#define BIT27   0b00001000000000000000000000000000
#endif
#ifndef BIT28
#define BIT28   0b00010000000000000000000000000000
#endif
#ifndef BIT29
#define BIT29   0b00100000000000000000000000000000
#endif
#ifndef BIT30
#define BIT30   0b01000000000000000000000000000000
#endif
#ifndef BIT31
#define BIT31   0b10000000000000000000000000000000
#endif

/**
 * \brief =========================================================================
 * Misc
 * =========================================================================
*/

//#define ARRAY_SIZE(a)       (sizeof(a) / sizeof((a)[0]))
//#define IS_POWER_OF_TWO(x)  (((x) & ((x) - 1)) == 0)

#define U_(_x)              (_x##U)
#define U(_x)               U_(_x)
#define UL(_x)              (_x##UL)
#define ULL(_x)             (_x##ULL)
#define L(_x)               (_x##L)
#define LL(_x)              (_x##LL)

#endif /* __VM_TYPES_HT__ */
